name: Optimized Build & Deploy Workflow

on:
  push:
    branches:
      - master
      - dev

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build_and_deploy:
    name: 🔧 Build & 🚀 Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Running Version 1.0 of Build and Deploy Workflow
        run: |
          echo "Running Version 1.0 of Build and Deploy Workflow"
          echo "Running on ${{ runner.os }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"

      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for proper change detection

      - name: 📝 Get Last Commit Message
        id: last_commit
        run: |
          sanitized_message=$(git log -1 --pretty=%B | tr '\n' ' ' | tr -d '\r')
          echo "message=$sanitized_message" >> $GITHUB_OUTPUT

      - name: Set Target Branch
        id: set_target_branch
        run: |
          current_branch="${GITHUB_REF##*/}"
          echo "Current branch: $current_branch"
          if [ "$current_branch" == "master" ]; then
            echo "TARGET_BRANCH=master-build" >> $GITHUB_ENV
          elif [ "$current_branch" == "dev" ]; then
            echo "TARGET_BRANCH=dev-build" >> $GITHUB_ENV
          else
            echo "Error: Push from unrecognized branch: $current_branch. Exiting."
            exit 1
          fi

      - name: 🔍 Detect Changes Since Last Deployment
        id: changes
        run: |
          echo "Detecting file changes since last deployment..."
          
          # Get the current commit hash
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "Current commit: $CURRENT_COMMIT"
          
          # Clone the target branch to find the last deployed commit
          mkdir -p temp_deploy
          cd temp_deploy
          git init
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch --depth=1 origin $TARGET_BRANCH
          
          # Check if target branch exists and get last deployment commit
          if git checkout $TARGET_BRANCH 2>/dev/null; then
            # Get the last commit message to find the original commit hash
            LAST_DEPLOY_MSG=$(git log -1 --pretty=%B)
            cd ..
            rm -rf temp_deploy
            
            # Check if we can find a reference to the original commit
            if [[ $LAST_DEPLOY_MSG =~ SHA:([0-9a-f]{40}) ]]; then
              LAST_COMMIT=${BASH_REMATCH[1]}
              echo "Last deployed commit found: $LAST_COMMIT"
              # Get all changes between last deployed commit and current
              git diff --name-only $LAST_COMMIT $CURRENT_COMMIT > changed_files.txt
            else
              echo "Couldn't find original commit reference in last deploy message, comparing with last 10 commits"
              # Fall back to comparing with the last 10 commits
              git diff --name-only HEAD~10..HEAD > changed_files.txt
            fi
          else
            echo "Target branch doesn't exist yet or couldn't be checked out, comparing with last 10 commits"
            cd ..
            rm -rf temp_deploy
            # Fall back to comparing with the last 10 commits
            git diff --name-only HEAD~10..HEAD > changed_files.txt
          fi
          
          # Print the changed files for debugging
          echo "Changed files:"
          cat changed_files.txt
          
          # Set flags based on changed files
          if grep -q "package-lock.json" changed_files.txt; then
            echo "npm_deps_changed=true" >> $GITHUB_OUTPUT
          else
            echo "npm_deps_changed=false" >> $GITHUB_OUTPUT
          fi
          
          if grep -q "composer.lock" changed_files.txt; then
            echo "composer_deps_changed=true" >> $GITHUB_OUTPUT
          else
            echo "composer_deps_changed=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for changes in specific directories
          if grep -q "plugins/wisesync/" changed_files.txt || grep -q "themes/papersync/" changed_files.txt; then
            echo "build_required=true" >> $GITHUB_OUTPUT
          else
            echo "build_required=false" >> $GITHUB_OUTPUT
          fi
          
          # List changed directories for debugging
          echo "Changed plugin/theme directories:"
          grep -E "^plugins/[^/]+/" changed_files.txt | cut -d/ -f1-2 | sort | uniq
          grep -E "^themes/[^/]+/" changed_files.txt | cut -d/ -f1-2 | sort | uniq

      #####################################
      # ⚙️ Setup PHP & Node (only if needed)
      #####################################
      
      - name: 🐘 Setup PHP
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer:v2
          coverage: none

      - name: 📦 Setup Node.js
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.npm_deps_changed == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      #####################################
      # ♻️ Restore Caches
      #####################################

      - name: ♻️ Get Composer Cache Directory
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        id: composer-cache-dir
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: ♻️ Cache Composer dependencies
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        uses: actions/cache@v3
        id: composer-cache
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: ♻️ Cache node_modules
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.npm_deps_changed == 'true'
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: node-modules-${{ runner.os }}-

      #####################################
      # 📥 Install Dependencies (only if needed)
      #####################################
      
      - name: 📥 Install Composer Dependencies
        if: (steps.changes.outputs.composer_deps_changed == 'true') || (steps.changes.outputs.build_required == 'true' && steps.composer-cache.outputs.cache-hit != 'true')
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: 📥 Install NPM Dependencies
        if: (steps.changes.outputs.npm_deps_changed == 'true') || (steps.changes.outputs.build_required == 'true' && steps.node-modules-cache.outputs.cache-hit != 'true')
        run: |
          if [ -f package-lock.json ]; then
            npm ci --prefer-offline --no-audit
          else
            npm install --prefer-offline --no-audit
          fi

      - name: 📥 Install WP-CLI
        if: steps.changes.outputs.build_required == 'true'
        run: |
          echo "Installing WP-CLI..."
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp
          wp --info

      #####################################
      # 🛠️ Build + Setup i18n/l10n + Lint (only if needed)
      #####################################

      - name: 🛠️ Build Assets for Blocks and Languages
        if: steps.changes.outputs.build_required == 'true'
        run: npm run build

      - name: 🛠️ Lint Fix Assets
        if: steps.changes.outputs.build_required == 'true'
        run: npm run lint:fix

      #####################################
      # 🧼 Cleanup
      #####################################

      - name: 🧼 Cleanup Build Files
        if: steps.changes.outputs.build_required == 'true'
        run: |
          echo "🧹 Cleaning up unnecessary build files..."
          rm -rf ./plugins/wisesync/blocks/src
          rm -rf ./themes/papersync/blocks/src

      #####################################
      # 🚀 Deploy
      #####################################

      - name: 🚀 Prepare Target Branch
        run: |
          echo "🚚 Preparing deployment to $TARGET_BRANCH branch..."
          git config --global user.name "Shubham Kumar Bansal"
          git config --global user.email "shub@shubkb.com"
          
          # Use sparse checkout for faster clone of target branch
          mkdir -p deploy
          cd deploy
          git init
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch --depth=1 origin $TARGET_BRANCH
          git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH

      - name: 🚚 Deploy Changed Plugins
        run: |
          echo "Deploying changed plugins..."
          
          # Get list of all plugin directories
          cd plugins
          plugin_dirs=$(find . -maxdepth 1 -type d | grep -v "^\.$" | sed 's/^\.\///')
          cd ..
          
          for plugin in $plugin_dirs; do
            if grep -q "plugins/$plugin" changed_files.txt || [ "$plugin" = "wisesync" -a "${{ steps.changes.outputs.build_required }}" = "true" ]; then
              echo "Updating plugin: $plugin"
              rm -rf deploy/plugins/$plugin
              mkdir -p deploy/plugins
              cp -r plugins/$plugin deploy/plugins/
            fi
          done

      - name: 🚚 Deploy Changed Themes
        run: |
          echo "Deploying changed themes..."
          
          # Get list of all theme directories
          cd themes
          theme_dirs=$(find . -maxdepth 1 -type d | grep -v "^\.$" | sed 's/^\.\///')
          cd ..
          
          for theme in $theme_dirs; do
            if grep -q "themes/$theme" changed_files.txt || [ "$theme" = "papersync" -a "${{ steps.changes.outputs.build_required }}" = "true" ]; then
              echo "Updating theme: $theme"
              rm -rf deploy/themes/$theme
              mkdir -p deploy/themes
              cp -r themes/$theme deploy/themes/
            fi
          done

      - name: 🚀 Commit and Push Changes
        run: |
          cd deploy
          git add --all
          # Add the original commit SHA to the commit message
          git commit -m "Deploy build: $(date +'%Y-%m-%d %H:%M:%S') - ${{ steps.last_commit.outputs.message }} (SHA:${{ github.sha }})" || echo "✅ No changes to commit"
          git push origin HEAD:$TARGET_BRANCH
