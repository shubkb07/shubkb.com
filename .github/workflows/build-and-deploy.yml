name: Build and Deploy

on:
  push:
    branches:
      - master

jobs:
  build_deploy:
    runs-on: macos-latest
    steps:
      - name: Check Out Code
        uses: actions/checkout@v3

      # Install the latest PHP via Homebrew (only once)
      - name: Install Latest PHP with Homebrew
        run: |
          echo "Installing latest PHP via Homebrew..."
          brew update
          brew install php || echo "PHP may already be installed."
          # Make sure the installed PHP is in PATH
          export PATH="/usr/local/opt/php/bin:$PATH"
          php -v

      # Setup Node using the official action
      - name: Setup Node Environment
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # Cache Composer dependencies
      - name: Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Cache npm dependencies
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies concurrently to save time
      - name: Install Dependencies Concurrently
        run: |
          echo "Installing Composer and npm dependencies concurrently..."
          # Run composer install in the background
          composer install --prefer-dist --no-progress --no-suggest &
          composer_pid=$!
          # Run npm install in the background
          npm install &
          npm_pid=$!
          # Wait for composer installation to finish
          wait $composer_pid
          composer_exit=$?
          # Wait for npm installation to finish
          wait $npm_pid
          npm_exit=$?
          echo "Composer install exit code: $composer_exit"
          echo "npm install exit code: $npm_exit"
          if [ $composer_exit -ne 0 ] || [ $npm_exit -ne 0 ]; then
            echo "One of the dependency installations failed."
            exit 1
          fi
          echo "Dependency installation complete."

      # Install WP-CLI using Homebrew
      - name: Install WP-CLI
        run: |
          echo "Installing WP-CLI via Homebrew..."
          brew install wp-cli || echo "WP-CLI may already be installed."
          wp --info

      # Run the build process
      - name: Build Assets
        run: |
          echo "Running npm run build..."
          npm run build || exit 1

      # Run PHPCBF for code quality check (show errors but continue)
      - name: Run PHPCBF for PHP Code Quality Check
        run: |
          echo "Running PHPCBF for code quality check..."
          set +e
          ./vendor/bin/phpcbf . -d memory_limit=1024M
          result=$?
          if [ $result -ne 0 ]; then
            echo "PHPCBF found some issues but continuing deployment..."
          fi
          set -e

      # Prepare build artifacts by removing unnecessary files/folders
      - name: Prepare Build Artifacts
        run: |
          echo "Preparing build artifacts..."
          rm -rf vendor node_modules .github .git .gitignore package-lock.json package.json composer.json composer.lock

      # Deploy build artifacts to the master-build branch
      - name: Deploy Artifacts
        run: |
          echo "Deploying artifacts to the master-build branch..."
          git init
          git config user.name "Shubham Kumar Bansal"
          git config user.email "shub@shubkb.com"
          git add .
          git commit -m "Deploy build: $(date +'%Y-%m-%d %H:%M:%S')"
          git branch -M master-build
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push --force origin master-build
