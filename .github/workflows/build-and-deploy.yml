name: Example Parallel Workflow

on:
  push:
    branches:
      - master

jobs:
  build_deploy:
    runs-on: macos-latest
    steps:
      - name: Check Out Code
        uses: actions/checkout@v3

      - name: Setup PHP
        run: |
          echo "Setting up PHP..."
          brew install php

      - name: Setup Composer
        run: |
          echo "Setting up Composer..."
          brew install composer

      - name: WP-CLI Install
        run: |
          echo "PHP Version:"
          php -v
          echo "Installing WP-CLI..."
          # Example installation steps for WP-CLI:
          # For macOS:
          # brew install wp-cli
          echo "WP-CLI installed successfully (placeholder)."

      - name: Composer Install
        run: |
          echo "Installing Composer dependencies..."
          composer install --prefer-dist --no-progress --no-suggest

      - name: npm Install
        run: |
          echo "Node Version:"
          node -v
          echo "NPM Version:"
          npm -v
          echo "Installing NPM dependencies..."
          npm install

      - name: Final Build Step
        run: |
          echo "Starting final build..."
          # If the build requires PHP or Node, you'll want to set them up again 
          # because each job runs on a fresh runner environment. 
          # But for simplicity, we assume you only need the existing code to run 'npm run build'.
          
          echo "Running npm run build..."
          npm run build || exit 1
           
          # Run PHPCBF for PHP code quality check - show errors but do not fail the build
          echo "Running PHPCBF for code quality check..."
          set +e
          ./vendor/bin/phpcbf . -d memory_limit=1024M
          result=$?
          if [ $result -ne 0 ]; then
            echo "PHPCBF found some issues but continuing deployment..."
          fi
          set -e
          
          echo "Build completed successfully!"
          echo "Removing build artifacts..."
          rm -r node_modules
          rm -r vendor
          rm -r .github
          rm -r .git
          rm -r .gitignore
          rm -r package-lock.json
          rm -r package.json
          rm -r composer.json
          rm -r composer.lock
          rm -r phpcs.xml
          rm -r block.json
          rm -r theme.json
          rm -r .eslintignore
          rm -r .eslintrc
          rm -r .stylelintignore
          rm -r .stylelintrc-css.json
          rm -r .stylelintrc.json
          rm -r ./plugins/wisesync/blocks/src
          rm -r ./themes/papersync/blocks/src

      - name: Deploy to master-build branch
        run: |
          echo "Deploying artifacts to the master-build branch..."
          # Initialize a new git repository in the current build directory
          git init
          git config user.name "Shubham Kumar Bansal"
          git config user.email "shub@shubkb.com"
          
          # Add remote origin (if it doesn't exist, it's fine)
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Fetch the existing master-build branch from remote, if any
          git fetch origin master-build || echo "Branch master-build does not exist remotely. Will create a new one."
          
          # Check out the master-build branch, or create it if it doesn't exist
          if git rev-parse --verify origin/master-build > /dev/null 2>&1; then
            git checkout -B master-build origin/master-build
          else
            git checkout -B master-build
          fi
          
          # Stage new changes and commit them
          git add .
          git commit -m "Deploy build: $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          
          # Push normally (without --force) to add your commit on top of the last one
          git push origin master-build
