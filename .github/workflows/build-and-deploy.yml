# .github/workflows/build-and-deploy.yml
name: üöÄ Epic Build & Deploy Workflow üéâ

on:
  push:
    branches:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build_deploy_and_release:
    name: üîß Build, üöÄ Deploy & üì¶ Release
    runs-on: ubuntu-latest
    if: ${{ !endsWith(github.ref, '-build') }}

    steps:
      - name: üèÅ Start Build & Deploy v1.2
        run: |
          echo "üèÅ Starting Build & Deploy v1.2!"
          echo "üñ•Ô∏è Runner OS: ${{ runner.os }}"
          echo "üì¶ Trigger: ${{ github.event_name }} in ${{ github.repository }}"

      - name: üì• Checkout the Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üí¨ Capture Last Commit Message
        id: last_commit
        run: |
          msg=$(git log -1 --pretty=%B | tr '\n' ' ' | tr -d '\r')
          echo "message=$msg" >> $GITHUB_OUTPUT

      - name: üéØ Determine Deployment Branch
        id: set_target_branch
        run: |
          branch="${GITHUB_REF##*/}"
          if [ "$branch" == "master" ]; then
            echo "TARGET_BRANCH=master-build" >> $GITHUB_ENV
            echo "IS_MASTER=true"     >> $GITHUB_ENV
          elif [ "$branch" == "dev" ]; then
            echo "TARGET_BRANCH=dev-build"    >> $GITHUB_ENV
            echo "IS_MASTER=false"   >> $GITHUB_ENV
          else
            echo "TARGET_BRANCH=develop-build" >> $GITHUB_ENV
            echo "IS_MASTER=false"   >> $GITHUB_ENV
          fi
          echo "CURRENT_BRANCH=$branch" >> $GITHUB_ENV

      - name: üîç Scan for Changes Since Last Deploy
        id: changes
        run: |
          set -euo pipefail

          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "üÜî Current commit: $CURRENT_COMMIT"

          # Try to fetch the remote target branch; ignore errors if it doesn't exist
          git fetch origin $TARGET_BRANCH:refs/remotes/origin/$TARGET_BRANCH || true

          if git rev-parse --verify origin/$TARGET_BRANCH >/dev/null 2>&1; then
            echo "üîÑ Diffing against origin/$TARGET_BRANCH"
            git diff --name-only origin/$TARGET_BRANCH $CURRENT_COMMIT > changed_files.txt
          else
            echo "‚ö†Ô∏è origin/$TARGET_BRANCH not found; diffing against HEAD^"
            git diff --name-only HEAD^ $CURRENT_COMMIT > changed_files.txt
          fi

          echo "üìÉ Changed files:"; cat changed_files.txt

          grep -q "package-lock.json"   changed_files.txt && echo "npm_deps_changed=true"     >> $GITHUB_OUTPUT || echo "npm_deps_changed=false"     >> $GITHUB_OUTPUT
          grep -q "composer.lock"       changed_files.txt && echo "composer_deps_changed=true">> $GITHUB_OUTPUT || echo "composer_deps_changed=false">> $GITHUB_OUTPUT
          grep -qE "plugins/wisesync/|themes/papersync/" changed_files.txt && echo "build_required=true" >> $GITHUB_OUTPUT || echo "build_required=false" >> $GITHUB_OUTPUT
          grep -q "^plugins/wisesync/"  changed_files.txt && echo "wisesync_changed=true"  >> $GITHUB_OUTPUT || echo "wisesync_changed=false"  >> $GITHUB_OUTPUT
          grep -q "^themes/papersync/"  changed_files.txt && echo "papersync_changed=true"  >> $GITHUB_OUTPUT || echo "papersync_changed=false"  >> $GITHUB_OUTPUT

          # Changed plugins list
          if grep -qE "^plugins/" changed_files.txt; then
            echo "plugins_changed=true" >> $GITHUB_OUTPUT
            grep -E "^plugins/" changed_files.txt | cut -d'/' -f2 | sort -u > changed_plugins.txt
          else
            echo "plugins_changed=false" >> $GITHUB_OUTPUT && touch changed_plugins.txt
          fi

          # Changed themes list
          if grep -qE "^themes/" changed_files.txt; then
            echo "themes_changed=true" >> $GITHUB_OUTPUT
            grep -E "^themes/" changed_files.txt | cut -d'/' -f2 | sort -u > changed_themes.txt
          else
            echo "themes_changed=false" >> $GITHUB_OUTPUT && touch changed_themes.txt
          fi

      - name: üêò Boot PHP
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer:v2
          coverage: none

      - name: üì¶ Boot Node.js
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.npm_deps_changed == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: ‚ôªÔ∏è Cache Composer
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: ‚ôªÔ∏è Cache Composer Deps
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: composer-${{ runner.os }}-${{ env.TARGET_BRANCH }}-$(date +%B)-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-${{ env.TARGET_BRANCH }}-$(date +%B)-

      - name: ‚ôªÔ∏è Cache NPM
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.npm_deps_changed == 'true'
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ env.TARGET_BRANCH }}-$(date +%B)-${{ hashFiles('**/package-lock.json') }}
          restore-keys: node-modules-${{ runner.os }}-${{ env.TARGET_BRANCH }}-$(date +%B)-

      - name: üì• Composer Install
        if: (steps.changes.outputs.composer_deps_changed == 'true') || (steps.changes.outputs.build_required == 'true' && steps.composer-cache.outputs.cache-hit != 'true')
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: üì• NPM Install
        if: (steps.changes.outputs.npm_deps_changed == 'true') || (steps.changes.outputs.build_required == 'true' && steps.node-modules-cache.outputs.cache-hit != 'true')
        run: |
          if [ -f package-lock.json ]; then
            npm ci --prefer-offline --no-audit
          else
            npm install --prefer-offline --no-audit
          fi

      - name: ‚ö° Install WP-CLI
        if: steps.changes.outputs.build_required == 'true'
        run: |
          curl -sSL https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp

      - name: üõ†Ô∏è Build Frontend Assets
        if: steps.changes.outputs.build_required == 'true'
        run: npm run build:linux

      - name: üîß Lint & Fix Assets
        if: env.CURRENT_BRANCH == 'master' && steps.changes.outputs.build_required == 'true'
        run: npm run lint:fix

      - name: üßπ Clean Up Build Artifacts
        if: steps.changes.outputs.build_required == 'true'
        run: |
          rm -rf ./plugins/wisesync/blocks/src ./themes/papersync/blocks/src

      - name: üì¶ Prep $TARGET_BRANCH for Deployment
        run: |
          git config --global user.name  "Shubham Kumar Bansal"
          git config --global user.email "shub@shubkb.com"
          mkdir -p deploy && cd deploy
          git init
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch --depth=1 origin $TARGET_BRANCH
          git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH

      - name: üöö Sync Plugin Updates - Special & Changed
        run: |
          mkdir -p deploy/plugins
          if [ "${{ steps.changes.outputs.build_required }}" = "true" ]; then
            cp -r plugins/wisesync deploy/plugins/
          fi
          while IFS= read -r plugin; do
            cp -r plugins/$plugin deploy/plugins/ || true
          done < changed_plugins.txt

      - name: üöö Sync Theme Updates - Special & Changed
        run: |
          mkdir -p deploy/themes
          if [ "${{ steps.changes.outputs.build_required }}" = "true" ]; then
            cp -r themes/papersync deploy/themes/
          fi
          while IFS= read -r theme; do
            cp -r themes/$theme deploy/themes/ || true
          done < changed_themes.txt

      - name: üìä Generate PR Data JSON for Development/Staging
        if: env.TARGET_BRANCH == 'dev-build' || env.TARGET_BRANCH == 'develop-build'
        run: |
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq

          # Set environment based on TARGET_BRANCH
          if [ "$TARGET_BRANCH" = "dev-build" ]; then
            ENVIRONMENT="development"
          else
            ENVIRONMENT="staging"
          fi

          # Create a JavaScript script to generate the JSON file
          cat > generate-pr-data.js << 'EOL'
          const { execSync } = require('child_process');

          // Configuration
          const environment = process.env.ENVIRONMENT;
          const targetBranch = process.env.TARGET_BRANCH;
          const lastCommitMessage = process.env.LAST_COMMIT_MESSAGE;
          const repoOwner = process.env.GITHUB_REPOSITORY.split('/')[0];
          const repoName = process.env.GITHUB_REPOSITORY.split('/')[1];
          const token = process.env.GITHUB_TOKEN;

          // Fetch open PRs using GitHub CLI
          const getPRData = () => {
            try {
              // Get open PRs
              const prListCmd = `curl -s -H "Authorization: token ${token}" "https://api.github.com/repos/${repoOwner}/${repoName}/pulls?state=open"`;
              const prList = JSON.parse(execSync(prListCmd).toString());
              
              // Filter PRs based on target branch
              const filteredPRs = prList.filter(pr => {
                if (targetBranch === 'dev-build') {
                  // For dev-build, only include PRs with head branch as dev
                  return pr.head.ref === 'dev';
                } else if (targetBranch === 'develop-build') {
                  // For develop-build, include all PRs except those with head branch as master or dev
                  return pr.head.ref !== 'master' && pr.head.ref !== 'dev';
                }
                return false;
              });
              
              // For each PR, get commits
              const prData = filteredPRs.map(pr => {
                try {
                  const commitsCmd = `curl -s -H "Authorization: token ${token}" "${pr.commits_url}"`;
                  const commits = JSON.parse(execSync(commitsCmd).toString());
                  
                  // Extract commit messages
                  const commitMessages = commits.map(commit => commit.commit.message);
                  
                  return {
                    pr_title: pr.title,
                    pr_desc: pr.body || '',
                    pr_head: pr.head.ref,
                    pr_base: pr.base.ref,
                    pr_url: pr.html_url,
                    commits: commitMessages
                  };
                } catch (error) {
                  console.error(`Error processing PR ${pr.number}:`, error);
                  return {
                    pr_title: pr.title,
                    pr_desc: pr.body || '',
                    pr_head: pr.head.ref,
                    pr_base: pr.base.ref,
                    pr_url: pr.html_url,
                    commits: ['Error fetching commits']
                  };
                }
              });
              
              return prData;
            } catch (error) {
              console.error('Error fetching PRs:', error);
              return [];
            }
          };

          // Generate the JSON structure
          const generateJson = () => {
            const prData = getPRData();
            
            return {
              environment: environment,
              last_commit_message: lastCommitMessage,
              data: prData
            };
          };

          // Write the JSON to file
          const fs = require('fs');
          const jsonData = generateJson();
          fs.writeFileSync('development.json', JSON.stringify(jsonData, null, 2));
          
          console.log('Generated development.json with PR data.');
          EOL

          # Run the script to generate the JSON file
          cd deploy
          export ENVIRONMENT="$ENVIRONMENT"
          export LAST_COMMIT_MESSAGE="${{ steps.last_commit.outputs.message }}"
          node ../generate-pr-data.js
          
          # Debug: Check if file was created
          ls -la development.json || echo "Failed to create development.json"
          cat development.json || echo "Failed to read development.json"

      - name: üíå Commit & Push to $TARGET_BRANCH
        run: |
          cd deploy
          git add --all
          git commit -m "Deploy build: $(date +'%Y-%m-%d %H:%M:%S') ‚Äì ${{ steps.last_commit.outputs.message }} (SHA:${{ github.sha }})" || echo "Nothing to deploy"
          git push origin HEAD:$TARGET_BRANCH

      - name: üîÑ Checkout & Sync wisesync Repo
        if: env.IS_MASTER == 'true' && steps.changes.outputs.wisesync_changed == 'true'
        uses: actions/checkout@v3
        with:
          repository: shubkb07/wisesync
          path: wisesync_repo
          token: ${{ secrets.GH_PAT }}

      - name: üîÑ Update wisesync Repo
        if: env.IS_MASTER == 'true' && steps.changes.outputs.wisesync_changed == 'true'
        run: |
          find wisesync_repo -mindepth 1 -not -path "wisesync_repo/.git*" -delete
          cp -r plugins/wisesync/* wisesync_repo/
          cd wisesync_repo
          git config user.name  "Shubham Kumar Bansal"
          git config user.email "shub@shubkb.com"
          git add --all
          git commit -m "Update from main repo: $(date +'%Y-%m-%d %H:%M:%S') ‚Äì ${{ steps.last_commit.outputs.message }}" || echo "No changes for wisesync"
          git push

      - name: üîÑ Checkout & Sync papersync Repo
        if: env.IS_MASTER == 'true' && steps.changes.outputs.papersync_changed == 'true'
        uses: actions/checkout@v3
        with:
          repository: shubkb07/papersync
          path: papersync_repo
          token: ${{ secrets.GH_PAT }}

      - name: üîÑ Update papersync Repo
        if: env.IS_MASTER == 'true' && steps.changes.outputs.papersync_changed == 'true'
        run: |
          find papersync_repo -mindepth 1 -not -path "papersync_repo/.git*" -delete
          cp -r themes/papersync/* papersync_repo/
          cd papersync_repo
          git config user.name  "Shubham Kumar Bansal"
          git config user.email "shub@shubkb.com"
          git add --all
          git commit -m "Update from main repo: $(date +'%Y-%m-%d %H:%M:%S') ‚Äì ${{ steps.last_commit.outputs.message }}" || echo "No changes for papersync"
          git push

      - name: üîÑ Checkout & Sync wordpress-sync Repo
        if: env.IS_MASTER == 'true' && (steps.changes.outputs.wisesync_changed == 'true' || steps.changes.outputs.papersync_changed == 'true')
        uses: actions/checkout@v3
        with:
          repository: shubkb07/wordpress-sync
          path: wordpress_sync_repo
          token: ${{ secrets.GH_PAT }}

      - name: üîÑ Update wordpress-sync Repo
        if: env.IS_MASTER == 'true' && (steps.changes.outputs.wisesync_changed == 'true' || steps.changes.outputs.papersync_changed == 'true')
        run: |
          cd wordpress_sync_repo
          if [ "${{ steps.changes.outputs.wisesync_changed }}" = "true" ]; then
            mkdir -p plugins
            cp -r ../plugins/wisesync plugins/
          fi
          if [ "${{ steps.changes.outputs.papersync_changed }}" = "true" ]; then
            mkdir -p themes
            cp -r ../themes/papersync themes/
          fi
          rm -f CODE_OF_CONDUCT.md LICENSE.md README.md CONTRIBUTING.md SECURITY.md SUPPORT.md
          cp -f ../CODE_OF_CONDUCT.md ../LICENSE.md ../README.md ../CONTRIBUTING.md ../SECURITY.md ../SUPPORT.md ./
          git config user.name  "Shubham Kumar Bansal"
          git config user.email "shub@shubkb.com"
          git add --all
          git commit -m "Update from main repo: $(date +'%Y-%m-%d %H:%M:%S') ‚Äì ${{ steps.last_commit.outputs.message }}" || echo "No changes for wordpress-sync"
          git push

      # Release steps (previously in the release job)
      - name: üîç Parse Release Information
        id: parse_release
        if: startsWith(steps.last_commit.outputs.message, 'Release:')
        shell: bash
        run: |
          set -euo pipefail
          
          # Store the full commit message with original format
          git log -1 --pretty=%B > full_commit_message.txt
          
          # Extract version from first line
          version_line=$(head -n 1 full_commit_message.txt)
          if [[ $version_line =~ ^Release:\ ([v]?[0-9]+\.[0-9]+\.[0-9]+(-[[:alnum:]]+)?)$ ]]; then
            version="${BASH_REMATCH[1]}"
            [[ $version != v* ]] && version="v$version"
          else
            echo "::error ::Invalid release version format. Expected 'Release: v1.2.3'"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Process to extract the quoted parts
          # First, create a cleaned version of message without the version line
          tail -n +2 full_commit_message.txt > message_body.txt
          
          # Replace literal "\n" with actual newlines
          sed -i 's/\\n/\n/g' message_body.txt
          
          # Create a Python script to extract the quoted sections
          cat > extract_quotes.py << 'EOF'
          import sys
          import re
          
          with open('message_body.txt', 'r') as f:
              content = f.read()
          
          # Regular expression to find quoted strings (handles multiline quotes)
          pattern = r'"([^"]*)"'
          
          matches = re.findall(pattern, content, re.DOTALL)
          
          for i, match in enumerate(matches):
              # Create separate files for each section to avoid escaping issues
              with open(f'section_{i}.txt', 'w') as f:
                  f.write(match)
          
          # Output the number of matches found
          print(len(matches))
          EOF
          
          # Run the Python script and capture the number of sections
          component_count=$(python3 extract_quotes.py)
          echo "Found $component_count quoted sections"
          
          # Verify we have at least 3 components
          if [[ $component_count -lt 3 ]]; then
            echo "::error ::Invalid release format: found $component_count quoted parts, expected at least 3"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Read the sections from files
          wisesync_title=$(cat section_0.txt)
          papersync_title=$(cat section_1.txt)
          
          # If we have exactly 3 components, use the 3rd as description for both
          if [[ $component_count -eq 3 ]]; then
            wisesync_desc=$(cat section_2.txt)
            papersync_desc=$(cat section_2.txt)
          else
            # We have 4+ components, use 3rd for wisesync and 4th for papersync
            wisesync_desc=$(cat section_2.txt)
            papersync_desc=$(cat section_3.txt)
          fi
          
          # Clean up temp files
          rm -f section_*.txt message_body.txt
          
          # Output the variables using heredocs to preserve formatting
          {
            echo "version=$version"
            echo "wisesync_title=$wisesync_title"
            echo "papersync_title=$papersync_title"
            echo "wisesync_desc<<EOF"
            echo "$wisesync_desc"
            echo "EOF"
            echo "papersync_desc<<EOF"
            echo "$papersync_desc"
            echo "EOF"
            echo "is_valid=true"
          } >> $GITHUB_OUTPUT
          
          # Debug output to help verify parsing
          echo "::group::Debug Release Information"
          echo "Version: $version"
          echo "WiseSync Title: $wisesync_title"
          echo "PaperSync Title: $papersync_title"
          echo "Component Count: $component_count"
          echo "WiseSync Description:"
          echo "$wisesync_desc"
          echo "PaperSync Description:"
          echo "$papersync_desc"
          echo "::endgroup::"

      - name: üè∑Ô∏è Create Release for Current Repo (sync-web)
        if: startsWith(steps.last_commit.outputs.message, 'Release:') && steps.parse_release.outputs.is_valid == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.parse_release.outputs.version }}
          name: ${{ steps.parse_release.outputs.wisesync_title }} & ${{ steps.parse_release.outputs.papersync_title }}
          body: |
            ${{ steps.parse_release.outputs.wisesync_desc }}

            ---

            ${{ steps.parse_release.outputs.papersync_desc }}
          prerelease: ${{ contains(steps.parse_release.outputs.version, 'alpha') || contains(steps.parse_release.outputs.version, 'beta') }}
      
      - name: üè∑Ô∏è Create Release for WordPress Sync
        if: startsWith(steps.last_commit.outputs.message, 'Release:') && steps.parse_release.outputs.is_valid == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_PAT }}
          repository: shubkb07/wordpress-sync
          tag_name: ${{ steps.parse_release.outputs.version }}
          name: ${{ steps.parse_release.outputs.wisesync_title }} & ${{ steps.parse_release.outputs.papersync_title }}
          body: |
            ${{ steps.parse_release.outputs.wisesync_desc }}

            ---

            ${{ steps.parse_release.outputs.papersync_desc }}
          prerelease: ${{ contains(steps.parse_release.outputs.version, 'alpha') || contains(steps.parse_release.outputs.version, 'beta') }}

      - name: üè∑Ô∏è Create Release for WiseSync
        if: startsWith(steps.last_commit.outputs.message, 'Release:') && steps.parse_release.outputs.is_valid == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_PAT }}
          repository: shubkb07/wisesync
          tag_name: ${{ steps.parse_release.outputs.version }}
          name: ${{ steps.parse_release.outputs.wisesync_title }}
          body: ${{ steps.parse_release.outputs.wisesync_desc }}
          prerelease: ${{ contains(steps.parse_release.outputs.version, 'alpha') || contains(steps.parse_release.outputs.version, 'beta') }}

      - name: üè∑Ô∏è Create Release for PaperSync
        if: startsWith(steps.last_commit.outputs.message, 'Release:') && steps.parse_release.outputs.is_valid == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_PAT }}
          repository: shubkb07/papersync
          tag_name: ${{ steps.parse_release.outputs.version }}
          name: ${{ steps.parse_release.outputs.papersync_title }}
          body: ${{ steps.parse_release.outputs.papersync_desc }}
          prerelease: ${{ contains(steps.parse_release.outputs.version, 'alpha') || contains(steps.parse_release.outputs.version, 'beta') }}
