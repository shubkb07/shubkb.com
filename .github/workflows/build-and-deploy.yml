name: 🚀 Epic Build & Deploy Workflow 🎉

on:
  push:
    branches:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build_and_deploy:
    name: 🔧 Build & 🚀 Deploy
    runs-on: ubuntu-latest
    if: ${{ !endsWith(github.ref, '-build') }}
    outputs:
      commit_message: ${{ steps.last_commit.outputs.message }}

    steps:
      - name: 🏁 Start Build & Deploy v1.2
        run: |
          echo "🏁 Starting Build & Deploy v1.2!"
          echo "🖥️ Running on ${{ runner.os }}"
          echo "📦 Trigger: ${{ github.event_name }} in ${{ github.repository }}"

      - name: 📥 Checkout the Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 💬 Capture Last Commit Message
        id: last_commit
        run: |
          sanitized_message=$(git log -1 --pretty=%B | tr '\n' ' ' | tr -d '\r')
          echo "message=$sanitized_message" >> $GITHUB_OUTPUT

      - name: 🎯 Determine Deployment Branch
        id: set_target_branch
        run: |
          current_branch="${GITHUB_REF##*/}"
          echo "🔍 Current branch: $current_branch"
          if [ "$current_branch" == "master" ]; then
            echo "TARGET_BRANCH=master-build" >> $GITHUB_ENV
            echo "IS_MASTER=true" >> $GITHUB_ENV
          elif [ "$current_branch" == "dev" ]; then
            echo "TARGET_BRANCH=dev-build" >> $GITHUB_ENV
            echo "IS_MASTER=false" >> $GITHUB_ENV
          else
            echo "TARGET_BRANCH=develop-build" >> $GITHUB_ENV
            echo "IS_MASTER=false" >> $GITHUB_ENV
          fi
          echo "CURRENT_BRANCH=$current_branch" >> $GITHUB_ENV

      - name: 🔍 Scan for Changes Since Last Deploy
        id: changes
        run: |
          echo "🔎 Detecting file changes..."
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "🆔 Current commit: $CURRENT_COMMIT"
          mkdir -p temp_deploy && cd temp_deploy
          git init
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch --depth=1 origin $TARGET_BRANCH
          if git checkout $TARGET_BRANCH 2>/dev/null; then
            LAST_DEPLOY_MSG=$(git log -1 --pretty=%B)
            cd .. && rm -rf temp_deploy
            if [[ $LAST_DEPLOY_MSG =~ SHA:([0-9a-f]{40}) ]]; then
              LAST_COMMIT=${BASH_REMATCH[1]}
              git diff --name-only $LAST_COMMIT $CURRENT_COMMIT > changed_files.txt
            else
              git diff --name-only HEAD~10..HEAD > changed_files.txt
            fi
          else
            cd .. && rm -rf temp_deploy
            git diff --name-only HEAD~10..HEAD > changed_files.txt
          fi

          echo "📃 Changed files:"; cat changed_files.txt
          grep -q "package-lock.json" changed_files.txt && echo "npm_deps_changed=true" >> $GITHUB_OUTPUT || echo "npm_deps_changed=false" >> $GITHUB_OUTPUT
          grep -q "composer.lock" changed_files.txt && echo "composer_deps_changed=true" >> $GITHUB_OUTPUT || echo "composer_deps_changed=false" >> $GITHUB_OUTPUT
          grep -qE "plugins/wisesync/|themes/papersync/" changed_files.txt && echo "build_required=true" >> $GITHUB_OUTPUT || echo "build_required=false" >> $GITHUB_OUTPUT
          grep -q "^plugins/wisesync/" changed_files.txt && echo "wisesync_changed=true" >> $GITHUB_OUTPUT || echo "wisesync_changed=false" >> $GITHUB_OUTPUT
          grep -q "^themes/papersync/" changed_files.txt && echo "papersync_changed=true" >> $GITHUB_OUTPUT || echo "papersync_changed=false" >> $GITHUB_OUTPUT
          if grep -qE "^plugins/" changed_files.txt; then
            echo "plugins_changed=true" >> $GITHUB_OUTPUT
            grep -E "^plugins/" changed_files.txt | cut -d'/' -f2 | sort | uniq > changed_plugins.txt
          else
            echo "plugins_changed=false" >> $GITHUB_OUTPUT && touch changed_plugins.txt
          fi
          if grep -qE "^themes/" changed_files.txt; then
            echo "themes_changed=true" >> $GITHUB_OUTPUT
            grep -E "^themes/" changed_files.txt | cut -d'/' -f2 | sort | uniq > changed_themes.txt
          else
            echo "themes_changed=false" >> $GITHUB_OUTPUT && touch changed_themes.txt
          fi

      - name: 🐘 Boot PHP
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer:v2
          coverage: none

      - name: 📦 Boot Node.js
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.npm_deps_changed == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: ♻️ Composer Cache Recall
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        id: composer-cache-dir
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: ♻️ Cache Composer Dependencies
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        uses: actions/cache@v3
        id: composer-cache
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: ♻️ NPM Cache Recall
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.npm_deps_changed == 'true'
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: node-modules-${{ runner.os }}-

      - name: 📥 Composer Install
        if: (steps.changes.outputs.composer_deps_changed == 'true') || (steps.changes.outputs.build_required == 'true' && steps.composer-cache.outputs.cache-hit != 'true')
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: 📥 NPM Install
        if: (steps.changes.outputs.npm_deps_changed == 'true') || (steps.changes.outputs.build_required == 'true' && steps.node-modules-cache.outputs.cache-hit != 'true')
        run: |
          if [ -f package-lock.json ]; then
            npm ci --prefer-offline --no-audit
          else
            npm install --prefer-offline --no-audit
          fi

      - name: ⚡ Install WP-CLI
        if: steps.changes.outputs.build_required == 'true'
        run: |
          echo "⚡ Fetching WP-CLI..."
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp
          wp --info

      - name: 🛠️ Build Frontend Assets
        if: steps.changes.outputs.build_required == 'true'
        run: npm run build:linux

      - name: 🔧 Lint & Fix Assets
        if: steps.changes.outputs.build_required == 'true'
        run: npm run lint:fix

      - name: 🧹 Clean Up Build Artifacts
        if: steps.changes.outputs.build_required == 'true'
        run: |
          echo "🧹 Tidying up…"
          rm -rf ./plugins/wisesync/blocks/src ./themes/papersync/blocks/src

      - name: 📦 Prep $TARGET_BRANCH for Deployment
        run: |
          echo "📦 Preparing branch: $TARGET_BRANCH"
          git config --global user.name "Shubham Kumar Bansal"
          git config --global user.email "shub@shubkb.com"
          mkdir -p deploy && cd deploy
          git init
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch --depth=1 origin $TARGET_BRANCH
          git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH

      - name: 🚚 Sync Plugin Updates - Special Plugins
        if: steps.changes.outputs.build_required == 'true'
        run: |
          echo "🚚 Deploying special plugins with build requirements..."
          rm -rf deploy/plugins/wisesync
          mkdir -p deploy/plugins
          cp -r plugins/wisesync deploy/plugins/

      - name: 🚚 Sync Plugin Updates - Changed Plugins
        if: steps.changes.outputs.plugins_changed == 'true'
        run: |
          echo "🚚 Deploying updated plugins..."
          while IFS= read -r plugin; do
            [ -d "plugins/$plugin" ] && { echo "  • $plugin"; rm -rf deploy/plugins/$plugin; mkdir -p deploy/plugins; cp -r plugins/$plugin deploy/plugins/; }
          done < changed_plugins.txt

      - name: 🚚 Sync Theme Updates - Special Themes
        if: steps.changes.outputs.build_required == 'true'
        run: |
          echo "🚚 Deploying special themes with build requirements..."
          rm -rf deploy/themes/papersync
          mkdir -p deploy/themes
          cp -r themes/papersync deploy/themes/

      - name: 🚚 Sync Theme Updates - Changed Themes
        if: steps.changes.outputs.themes_changed == 'true'
        run: |
          echo "🚚 Deploying updated themes..."
          while IFS= read -r theme; do
            [ -d "themes/$theme" ] && { echo "  • $theme"; rm -rf deploy/themes/$theme; mkdir -p deploy/themes; cp -r themes/$theme deploy/themes/; }
          done < changed_themes.txt

      - name: 💌 Commit & Push to $TARGET_BRANCH
        run: |
          cd deploy
          git add --all
          git commit -m "Deploy build: $(date +'%Y-%m-%d %H:%M:%S') – ${{ steps.last_commit.outputs.message }} (SHA:${{ github.sha }})" || echo "✅ Nothing new to deploy!"
          git push origin HEAD:$TARGET_BRANCH
          echo "🚀 All done! Site deployed to $TARGET_BRANCH 🎉"

      # … (other cross-repo deploy steps unchanged) …

  process_release:
    name: 📦 Process Release
    runs-on: ubuntu-latest
    needs: build_and_deploy
    if: ${{ startsWith(needs.build_and_deploy.outputs.commit_message, 'Release:') }}
    outputs:
      version: ${{ steps.parse_release.outputs.version }}
      release_type: ${{ steps.parse_release.outputs.release_type }}
      wisesync_title: ${{ steps.parse_release.outputs.wisesync_title }}
      papersync_title: ${{ steps.parse_release.outputs.papersync_title }}
      wisesync_desc: ${{ steps.parse_release.outputs.wisesync_desc }}
      papersync_desc: ${{ steps.parse_release.outputs.papersync_desc }}
      is_valid: ${{ steps.parse_release.outputs.is_valid }}

    steps:
      - name: 📥 Checkout the Repo
        uses: actions/checkout@v3

      - name: 💬 Get Commit Message
        id: get_commit_message
        run: |
          full_msg=$(git log -1 --pretty=format:%B)
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$full_msg" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🔍 Parse Release Information
        id: parse_release
        shell: bash
        run: |
          set -euo pipefail

          # Read full message
          commit_message=$(git log -1 --pretty=format:%B)
          echo "🔎 Analyzing commit message…"
          echo "$commit_message"

          # 1) Extract and validate version
          version_line=$(echo "$commit_message" | sed -n '1p')
          if [[ $version_line =~ ^Release:\ ([v]?[0-9]+\.[0-9]+\.[0-9]+(-[[:alnum:]]+)?)$ ]]; then
            version="${BASH_REMATCH[1]}"
            [[ $version != v* ]] && version="v$version"
          else
            echo "❌ First line must be exactly 'Release: VERSION'"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 2) Skip blank lines, grab first non-empty after line 1
          parameters_line=$(echo "$commit_message" | tail -n +2 | grep -v '^[[:space:]]*$' | head -n1)
          echo "Second non-empty line: $parameters_line"
          if [[ -z $parameters_line ]]; then
            echo "❌ Missing second line with quoted parameters"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 3) Parse quoted components
          components=()
          while [[ $parameters_line =~ \"([^\"]*)\" ]]; do
            components+=("${BASH_REMATCH[1]}")
            parameters_line=${parameters_line#*\"${components[-1]}\"}
          done

          # 4) Validate count & type
          if [[ ${#components[@]} -lt 5 ]]; then
            echo "❌ Expected 5 components, found ${#components[@]}"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          release_type="${components[0]}"
          wisesync_title="${components[1]}"
          papersync_title="${components[2]}"
          wisesync_desc="${components[3]}"
          papersync_desc="${components[4]}"
          if [[ ! $release_type =~ ^(r|R|pr|PR)$ ]]; then
            echo "❌ Invalid release type: $release_type"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 5) Emit outputs
          echo "✅ Valid release format detected!"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "release_type=$release_type" >> $GITHUB_OUTPUT
          echo "wisesync_title=$wisesync_title" >> $GITHUB_OUTPUT
          echo "papersync_title=$papersync_title" >> $GITHUB_OUTPUT
          echo "wisesync_desc<<EOF" >> $GITHUB_OUTPUT
          echo "$wisesync_desc"
          echo "EOF" >> $GITHUB_OUTPUT
          echo "papersync_desc<<EOF" >> $GITHUB_OUTPUT
          echo "$papersync_desc"
          echo "EOF" >> $GITHUB_OUTPUT
          echo "is_valid=true" >> $GITHUB_OUTPUT

  create_releases:
    name: 🚀 Create Releases
    runs-on: ubuntu-latest
    needs: process_release
    if: ${{ needs.process_release.outputs.is_valid == 'true' }}
    steps:
      # … your release‐creation steps unchanged …
