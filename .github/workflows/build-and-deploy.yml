name: 🚀 Epic Build & Deploy Workflow 🎉

on:
  push:
    branches:
      - '**'
    
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build_and_deploy:
    name: 🔧 Build & 🚀 Deploy
    runs-on: ubuntu-latest
    
    # Skip this workflow on build branches to prevent infinite loops
    if: ${{ !endsWith(github.ref, '-build') }}
    
    outputs:
      commit_message: ${{ steps.last_commit.outputs.message }}

    steps:
      - name: 🏁 Start Build & Deploy v1.2
        run: |
          echo "🏁 Starting Build & Deploy v1.2!"
          echo "🖥️ Running on ${{ runner.os }}"
          echo "📦 Trigger: ${{ github.event_name }} in ${{ github.repository }}"

      - name: 📥 Checkout the Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 💬 Capture Last Commit Message
        id: last_commit
        run: |
          sanitized_message=$(git log -1 --pretty=%B | tr '\n' ' ' | tr -d '\r')
          echo "message=$sanitized_message" >> $GITHUB_OUTPUT

      - name: 🎯 Determine Deployment Branch
        id: set_target_branch
        run: |
          current_branch="${GITHUB_REF##*/}"
          echo "🔍 Current branch: $current_branch"
          if [ "$current_branch" == "master" ]; then
            echo "TARGET_BRANCH=master-build" >> $GITHUB_ENV
            echo "IS_MASTER=true" >> $GITHUB_ENV
          elif [ "$current_branch" == "dev" ]; then
            echo "TARGET_BRANCH=dev-build" >> $GITHUB_ENV
            echo "IS_MASTER=false" >> $GITHUB_ENV
          else
            echo "TARGET_BRANCH=develop-build" >> $GITHUB_ENV
            echo "IS_MASTER=false" >> $GITHUB_ENV
          fi
          echo "CURRENT_BRANCH=$current_branch" >> $GITHUB_ENV

      - name: 🔍 Scan for Changes Since Last Deploy
        id: changes
        run: |
          echo "🔎 Detecting file changes..."
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "🆔 Current commit: $CURRENT_COMMIT"
          mkdir -p temp_deploy && cd temp_deploy
          git init
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch --depth=1 origin $TARGET_BRANCH
          if git checkout $TARGET_BRANCH 2>/dev/null; then
            LAST_DEPLOY_MSG=$(git log -1 --pretty=%B)
            cd .. && rm -rf temp_deploy
            if [[ $LAST_DEPLOY_MSG =~ SHA:([0-9a-f]{40}) ]]; then
              LAST_COMMIT=${BASH_REMATCH[1]}
              echo "🔄 Last deployed SHA: $LAST_COMMIT"
              git diff --name-only $LAST_COMMIT $CURRENT_COMMIT > changed_files.txt
            else
              echo "⚠️ No SHA in last message; comparing last 10 commits"
              git diff --name-only HEAD~10..HEAD > changed_files.txt
            fi
          else
            echo "⚠️ No target branch yet; comparing last 10 commits"
            cd .. && rm -rf temp_deploy
            git diff --name-only HEAD~10..HEAD > changed_files.txt
          fi
          echo "📃 Changed files:"
          cat changed_files.txt

          # Check for dependency changes
          grep -q "package-lock.json" changed_files.txt && echo "npm_deps_changed=true" >> $GITHUB_OUTPUT || echo "npm_deps_changed=false" >> $GITHUB_OUTPUT
          grep -q "composer.lock" changed_files.txt && echo "composer_deps_changed=true" >> $GITHUB_OUTPUT || echo "composer_deps_changed=false" >> $GITHUB_OUTPUT
          
          # Check if build is required for special plugins/themes
          if grep -qE "plugins/wisesync/|themes/papersync/" changed_files.txt; then
            echo "build_required=true" >> $GITHUB_OUTPUT
          else
            echo "build_required=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for wisesync and papersync changes specifically
          if grep -q "^plugins/wisesync/" changed_files.txt; then
            echo "wisesync_changed=true" >> $GITHUB_OUTPUT
          else
            echo "wisesync_changed=false" >> $GITHUB_OUTPUT
          fi
          
          if grep -q "^themes/papersync/" changed_files.txt; then
            echo "papersync_changed=true" >> $GITHUB_OUTPUT
          else
            echo "papersync_changed=false" >> $GITHUB_OUTPUT
          fi
          
          # Find all changed plugins
          if grep -qE "^plugins/" changed_files.txt; then
            echo "plugins_changed=true" >> $GITHUB_OUTPUT
            grep -E "^plugins/" changed_files.txt | cut -d'/' -f2 | sort | uniq > changed_plugins.txt
            echo "Changed plugins:"
            cat changed_plugins.txt
          else
            echo "plugins_changed=false" >> $GITHUB_OUTPUT
            touch changed_plugins.txt
          fi
          
          # Find all changed themes
          if grep -qE "^themes/" changed_files.txt; then
            echo "themes_changed=true" >> $GITHUB_OUTPUT
            grep -E "^themes/" changed_files.txt | cut -d'/' -f2 | sort | uniq > changed_themes.txt
            echo "Changed themes:"
            cat changed_themes.txt
          else
            echo "themes_changed=false" >> $GITHUB_OUTPUT
            touch changed_themes.txt
          fi

      - name: 🐘 Boot PHP
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer:v2
          coverage: none

      - name: 📦 Boot Node.js
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.npm_deps_changed == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: ♻️ Composer Cache Recall
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        id: composer-cache-dir
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: ♻️ Cache Composer Dependencies
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        uses: actions/cache@v3
        id: composer-cache
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: ♻️ NPM Cache Recall
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.npm_deps_changed == 'true'
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: node-modules-${{ runner.os }}-

      - name: 📥 Composer Install
        if: (steps.changes.outputs.composer_deps_changed == 'true') || (steps.changes.outputs.build_required == 'true' && steps.composer-cache.outputs.cache-hit != 'true')
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: 📥 NPM Install
        if: (steps.changes.outputs.npm_deps_changed == 'true') || (steps.changes.outputs.build_required == 'true' && steps.node-modules-cache.outputs.cache-hit != 'true')
        run: |
          if [ -f package-lock.json ]; then
            npm ci --prefer-offline --no-audit
          else
            npm install --prefer-offline --no-audit
          fi

      - name: ⚡ Install WP-CLI
        if: steps.changes.outputs.build_required == 'true'
        run: |
          echo "⚡ Fetching WP-CLI..."
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp
          wp --info

      - name: 🛠️ Build Frontend Assets
        if: steps.changes.outputs.build_required == 'true'
        run: npm run build:linux

      - name: 🔧 Lint & Fix Assets
        if: steps.changes.outputs.build_required == 'true'
        run: npm run lint:fix

      - name: 🧹 Clean Up Build Artifacts
        if: steps.changes.outputs.build_required == 'true'
        run: |
          echo "🧹 Tidying up…"
          rm -rf ./plugins/wisesync/blocks/src ./themes/papersync/blocks/src

      - name: 📦 Prep $TARGET_BRANCH for Deployment
        run: |
          echo "📦 Preparing branch: $TARGET_BRANCH"
          git config --global user.name "Shubham Kumar Bansal"
          git config --global user.email "shub@shubkb.com"
          mkdir -p deploy && cd deploy
          git init
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch --depth=1 origin $TARGET_BRANCH
          git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH

      - name: 🚚 Sync Plugin Updates - Special Plugins
        if: steps.changes.outputs.build_required == 'true'
        run: |
          echo "🚚 Deploying special plugins with build requirements..."
          echo "  • Updating plugin: wisesync (with build)"
          rm -rf deploy/plugins/wisesync
          mkdir -p deploy/plugins
          cp -r plugins/wisesync deploy/plugins/

      - name: 🚚 Sync Plugin Updates - Changed Plugins
        if: steps.changes.outputs.plugins_changed == 'true'
        run: |
          echo "🚚 Deploying updated plugins..."
          while IFS= read -r plugin; do
            if [ -n "$plugin" ] && [ -d "plugins/$plugin" ]; then
              echo "  • Updating plugin: $plugin"
              rm -rf deploy/plugins/$plugin
              mkdir -p deploy/plugins
              cp -r plugins/$plugin deploy/plugins/
            fi
          done < changed_plugins.txt

      - name: 🚚 Sync Theme Updates - Special Themes
        if: steps.changes.outputs.build_required == 'true'
        run: |
          echo "🚚 Deploying special themes with build requirements..."
          echo "  • Updating theme: papersync (with build)"
          rm -rf deploy/themes/papersync
          mkdir -p deploy/themes
          cp -r themes/papersync deploy/themes/

      - name: 🚚 Sync Theme Updates - Changed Themes
        if: steps.changes.outputs.themes_changed == 'true'
        run: |
          echo "🚚 Deploying updated themes..."
          while IFS= read -r theme; do
            if [ -n "$theme" ] && [ -d "themes/$theme" ]; then
              echo "  • Updating theme: $theme"
              rm -rf deploy/themes/$theme
              mkdir -p deploy/themes
              cp -r themes/$theme deploy/themes/
            fi
          done < changed_themes.txt

      - name: 💌 Commit & Push to $TARGET_BRANCH
        run: |
          cd deploy
          git add --all
          git commit -m "Deploy build: $(date +'%Y-%m-%d %H:%M:%S') – ${{ steps.last_commit.outputs.message }} (SHA:${{ github.sha }})" || echo "✅ Nothing new to deploy!"
          git push origin HEAD:$TARGET_BRANCH
          echo "🚀 All done! Site deployed to $TARGET_BRANCH 🎉"

      # New steps for additional repository pushes when on master branch with wisesync/papersync changes
      - name: 🔄 Checkout wisesync repo
        if: env.IS_MASTER == 'true' && steps.changes.outputs.wisesync_changed == 'true'
        uses: actions/checkout@v3
        with:
          repository: shubkb07/wisesync
          path: wisesync_repo
          token: ${{ secrets.GH_PAT }}
          
      - name: 🔄 Update wisesync repo
        if: env.IS_MASTER == 'true' && steps.changes.outputs.wisesync_changed == 'true'
        run: |
          echo "🛫 Updating wisesync in dedicated repo..."
          # Clear the directory content but keep .git folder
          find wisesync_repo -mindepth 1 -not -path "wisesync_repo/.git*" -delete
          # Copy the latest content
          cp -r plugins/wisesync/* wisesync_repo/
          cd wisesync_repo
          git config user.name "Shubham Kumar Bansal"
          git config user.email "shub@shubkb.com"
          git add --all
          git commit -m "Update from main repo: $(date +'%Y-%m-%d %H:%M:%S') – ${{ steps.last_commit.outputs.message }}" || echo "No changes to commit for wisesync"
          git push
          cd ..
          echo "✅ Pushed wisesync to dedicated repo"

      - name: 🔄 Checkout papersync repo
        if: env.IS_MASTER == 'true' && steps.changes.outputs.papersync_changed == 'true'
        uses: actions/checkout@v3
        with:
          repository: shubkb07/papersync
          path: papersync_repo
          token: ${{ secrets.GH_PAT }}
          
      - name: 🔄 Update papersync repo
        if: env.IS_MASTER == 'true' && steps.changes.outputs.papersync_changed == 'true'
        run: |
          echo "🛫 Updating papersync in dedicated repo..."
          # Clear the directory content but keep .git folder
          find papersync_repo -mindepth 1 -not -path "papersync_repo/.git*" -delete
          # Copy the latest content
          cp -r themes/papersync/* papersync_repo/
          cd papersync_repo
          git config user.name "Shubham Kumar Bansal"
          git config user.email "shub@shubkb.com"
          git add --all
          git commit -m "Update from main repo: $(date +'%Y-%m-%d %H:%M:%S') – ${{ steps.last_commit.outputs.message }}" || echo "No changes to commit for papersync"
          git push
          cd ..
          echo "✅ Pushed papersync to dedicated repo"

      - name: 🔄 Checkout wordpress-sync repo
        if: env.IS_MASTER == 'true' && (steps.changes.outputs.wisesync_changed == 'true' || steps.changes.outputs.papersync_changed == 'true')
        uses: actions/checkout@v3
        with:
          repository: shubkb07/wordpress-sync
          path: wordpress_sync_repo
          token: ${{ secrets.GH_PAT }}
          
      - name: 🔄 Update wordpress-sync repo
        if: env.IS_MASTER == 'true' && (steps.changes.outputs.wisesync_changed == 'true' || steps.changes.outputs.papersync_changed == 'true')
        run: |
          echo "🛫 Updating wordpress-sync repo..."
          cd wordpress_sync_repo
          
          if [ "${{ steps.changes.outputs.wisesync_changed }}" == "true" ]; then
            echo "Adding/updating wisesync plugin..."
            mkdir -p plugins
            rm -rf plugins/wisesync
            cp -r ../plugins/wisesync plugins/
          fi
          
          if [ "${{ steps.changes.outputs.papersync_changed }}" == "true" ]; then
            echo "Adding/updating papersync theme..."
            mkdir -p themes
            rm -rf themes/papersync
            cp -r ../themes/papersync themes/
          fi

          echo "Syncing other changes to wordpress-sync repo..."
          rm -rf CODE_OF_CONDUCT.md LICENSE.md README.md CONTRIBUTING.md SECURITY.md SUPPORT.md
          # Copy documentation files from the main repo
          cp -f ../CODE_OF_CONDUCT.md ../LICENSE.md ../README.md ../CONTRIBUTING.md ../SECURITY.md ../SUPPORT.md ./

          echo "📦 Preparing wordpress-sync repo for deployment..."
          
          git config user.name "Shubham Kumar Bansal"
          git config user.email "shub@shubkb.com"
          git add --all
          git commit -m "Update from main repo: $(date +'%Y-%m-%d %H:%M:%S') – ${{ steps.last_commit.outputs.message }}" || echo "No changes to commit for wordpress-sync"
          git push
          cd ..
          echo "✅ Pushed to wordpress-sync repo"

  # New job for release processing
  process_release:
    name: 📦 Process Release
    runs-on: ubuntu-latest
    needs: build_and_deploy
    if: ${{ startsWith(needs.build_and_deploy.outputs.commit_message, 'Release:') }}
    
    outputs:
      version: ${{ steps.parse_release.outputs.version }}
      release_type: ${{ steps.parse_release.outputs.release_type }}
      wisesync_title: ${{ steps.parse_release.outputs.wisesync_title }}
      papersync_title: ${{ steps.parse_release.outputs.papersync_title }}
      wisesync_desc: ${{ steps.parse_release.outputs.wisesync_desc }}
      papersync_desc: ${{ steps.parse_release.outputs.papersync_desc }}
      is_valid: ${{ steps.parse_release.outputs.is_valid }}
    
    steps:
      - name: 📥 Checkout the Repo
        uses: actions/checkout@v3
      
      - name: 💬 Get Commit Message
        id: get_commit_message
        run: |
          commit_message=$(git log -1 --pretty=%B)
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$commit_message" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: 🔍 Parse Release Information
        id: parse_release
        run: |
          commit_message="${{ steps.get_commit_message.outputs.commit_message }}"
          echo "🔎 Analyzing commit message for release info..."
          echo "$commit_message"
          
          # Check if it's a release commit
          if [[ ! "$commit_message" =~ ^Release:\ .*$ ]]; then
            echo "❌ Not a release commit"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Remove the "Release: " prefix
          release_info="${commit_message#Release: }"
          echo "Release info: $release_info"
          
          # Determine the delimiter (either single or double quote)
          if [[ "$release_info" =~ ^\".*$ ]]; then
            delimiter="\""
            echo "Using double quote delimiter"
          elif [[ "$release_info" =~ ^\'.*$ ]]; then
            delimiter="'"
            echo "Using single quote delimiter"
          else
            echo "❌ Invalid format: Missing opening quote"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Create array of components
          components=()
          remainder="$release_info"
          
          # Extract components between delimiters
          while [[ "$remainder" =~ $delimiter ]]; do
            # Get everything before the delimiter
            before="${remainder%%$delimiter*}"
            remainder="${remainder#*$delimiter}"
            
            # Get everything before the next delimiter
            if [[ "$remainder" =~ $delimiter ]]; then
              component="${remainder%%$delimiter*}"
              components+=("$component")
              remainder="${remainder#*$delimiter}"
            else
              echo "❌ Unmatched delimiter"
              echo "is_valid=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          
          echo "Found ${#components[@]} components"
          
          # We need exactly 6 components
          if [ ${#components[@]} -ne 6 ]; then
            echo "❌ Invalid format: Expected 6 components, found ${#components[@]}"
            for i in "${!components[@]}"; do
              echo "Component $i: ${components[$i]}"
            done
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract the components
          version="${components[0]}"
          release_type="${components[1]}"
          wisesync_title="${components[2]}"
          papersync_title="${components[3]}"
          wisesync_desc="${components[4]}"
          papersync_desc="${components[5]}"
          
          # Validate version format (starts with 'v' followed by numbers and dots, or just numbers and dots)
          if [[ ! "$version" =~ ^(v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?)$ ]]; then
            echo "❌ Invalid version format: $version"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Add 'v' prefix if not present
          if [[ ! "$version" =~ ^v ]]; then
            version="v$version"
            echo "Added 'v' prefix to version: $version"
          fi
          
          # Validate release type
          if [[ ! "$release_type" =~ ^(r|R|pr|PR)$ ]]; then
            echo "❌ Invalid release type: $release_type"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # All validations passed
          echo "✅ Valid release format detected!"
          echo "🏷️ Version: $version"
          echo "📝 Release Type: $release_type"
          echo "🔌 WiseSync Title: $wisesync_title"
          echo "🎨 PaperSync Title: $papersync_title"
          
          # Set outputs
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "release_type=$release_type" >> $GITHUB_OUTPUT
          echo "wisesync_title=$wisesync_title" >> $GITHUB_OUTPUT
          echo "papersync_title=$papersync_title" >> $GITHUB_OUTPUT
          echo "wisesync_desc<<EOF" >> $GITHUB_OUTPUT
          echo "$wisesync_desc" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "papersync_desc<<EOF" >> $GITHUB_OUTPUT
          echo "$papersync_desc" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "is_valid=true" >> $GITHUB_OUTPUT

  create_releases:
    name: 🚀 Create Releases
    runs-on: ubuntu-latest
    needs: process_release
    if: ${{ needs.process_release.outputs.is_valid == 'true' }}
    
    steps:
      - name: 📥 Checkout Main Repo (master-build branch)
        uses: actions/checkout@v3
        with:
          ref: master-build
          path: main_repo
      
      - name: 📥 Checkout WordPress Sync Repo
        uses: actions/checkout@v3
        with:
          repository: shubkb07/wordpress-sync
          token: ${{ secrets.GH_PAT }}
          path: wordpress_sync_repo
      
      - name: 📥 Checkout WiseSync Repo
        uses: actions/checkout@v3
        with:
          repository: shubkb07/wisesync
          token: ${{ secrets.GH_PAT }}
          path: wisesync_repo
      
      - name: 📥 Checkout PaperSync Repo
        uses: actions/checkout@v3
        with:
          repository: shubkb07/papersync
          token: ${{ secrets.GH_PAT }}
          path: papersync_repo
      
      - name: 🏷️ Create Release for Main Repo
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.process_release.outputs.version }}
          name: "${{ needs.process_release.outputs.wisesync_title }} & ${{ needs.process_release.outputs.papersync_title }}"
          body: |
            ${{ needs.process_release.outputs.wisesync_desc }}
            
            ${{ needs.process_release.outputs.papersync_desc }}
          prerelease: ${{ contains(needs.process_release.outputs.release_type, 'p') }}
          generate_release_notes: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Create Release for WordPress Sync Repo
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.process_release.outputs.version }}
          name: "${{ needs.process_release.outputs.wisesync_title }} & ${{ needs.process_release.outputs.papersync_title }}"
          body: |
            ${{ needs.process_release.outputs.wisesync_desc }}
            
            ${{ needs.process_release.outputs.papersync_desc }}
          prerelease: ${{ contains(needs.process_release.outputs.release_type, 'p') }}
          generate_release_notes: false
          token: ${{ secrets.GH_PAT }}
          repository: shubkb07/wordpress-sync
      
      - name: 🏷️ Create Release for WiseSync Repo
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.process_release.outputs.version }}
          name: "${{ needs.process_release.outputs.wisesync_title }}"
          body: ${{ needs.process_release.outputs.wisesync_desc }}
          prerelease: ${{ contains(needs.process_release.outputs.release_type, 'p') }}
          generate_release_notes: false
          token: ${{ secrets.GH_PAT }}
          repository: shubkb07/wisesync
      
      - name: 🏷️ Create Release for PaperSync Repo
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.process_release.outputs.version }}
          name: "${{ needs.process_release.outputs.papersync_title }}"
          body: ${{ needs.process_release.outputs.papersync_desc }}
          prerelease: ${{ contains(needs.process_release.outputs.release_type, 'p') }}
          generate_release_notes: false
          token: ${{ secrets.GH_PAT }}
          repository: shubkb07/papersync
