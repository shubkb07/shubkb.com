# .github/workflows/build-and-deploy.yml
name: 🚀 Epic Build & Deploy Workflow 🎉

on:
  push:
    branches:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build_and_deploy:
    name: 🔧 Build & 🚀 Deploy
    runs-on: ubuntu-latest
    if: ${{ !endsWith(github.ref, '-build') }}
    outputs:
      commit_message: ${{ steps.last_commit.outputs.message }}

    steps:
      - name: 🏁 Start Build & Deploy v1.2
        run: |
          echo "🏁 Starting Build & Deploy v1.2!"
          echo "🖥️ Runner OS: ${{ runner.os }}"
          echo "📦 Trigger: ${{ github.event_name }} in ${{ github.repository }}"

      - name: 📥 Checkout the Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 💬 Capture Last Commit Message
        id: last_commit
        run: |
          msg=$(git log -1 --pretty=%B | tr '\n' ' ' | tr -d '\r')
          echo "message=$msg" >> $GITHUB_OUTPUT

      - name: 🎯 Determine Deployment Branch
        id: set_target_branch
        run: |
          branch="${GITHUB_REF##*/}"
          if [ "$branch" == "master" ]; then
            echo "TARGET_BRANCH=master-build" >> $GITHUB_ENV
            echo "IS_MASTER=true"     >> $GITHUB_ENV
          elif [ "$branch" == "dev" ]; then
            echo "TARGET_BRANCH=dev-build"    >> $GITHUB_ENV
            echo "IS_MASTER=false"   >> $GITHUB_ENV
          else
            echo "TARGET_BRANCH=develop-build" >> $GITHUB_ENV
            echo "IS_MASTER=false"   >> $GITHUB_ENV
          fi
          echo "CURRENT_BRANCH=$branch" >> $GITHUB_ENV

      - name: 🔍 Scan for Changes Since Last Deploy
        id: changes
        run: |
          set -euo pipefail

          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "🆔 Current commit: $CURRENT_COMMIT"

          # Try to fetch the remote target branch; ignore errors if it doesn't exist
          git fetch origin $TARGET_BRANCH:refs/remotes/origin/$TARGET_BRANCH || true

          if git rev-parse --verify origin/$TARGET_BRANCH >/dev/null 2>&1; then
            echo "🔄 Diffing against origin/$TARGET_BRANCH"
            git diff --name-only origin/$TARGET_BRANCH $CURRENT_COMMIT > changed_files.txt
          else
            echo "⚠️ origin/$TARGET_BRANCH not found; diffing against HEAD^"
            git diff --name-only HEAD^ $CURRENT_COMMIT > changed_files.txt
          fi

          echo "📃 Changed files:"; cat changed_files.txt

          grep -q "package-lock.json"   changed_files.txt && echo "npm_deps_changed=true"     >> $GITHUB_OUTPUT || echo "npm_deps_changed=false"     >> $GITHUB_OUTPUT
          grep -q "composer.lock"       changed_files.txt && echo "composer_deps_changed=true">> $GITHUB_OUTPUT || echo "composer_deps_changed=false">> $GITHUB_OUTPUT
          grep -qE "plugins/wisesync/|themes/papersync/" changed_files.txt && echo "build_required=true" >> $GITHUB_OUTPUT || echo "build_required=false" >> $GITHUB_OUTPUT
          grep -q "^plugins/wisesync/"  changed_files.txt && echo "wisesync_changed=true"  >> $GITHUB_OUTPUT || echo "wisesync_changed=false"  >> $GITHUB_OUTPUT
          grep -q "^themes/papersync/"  changed_files.txt && echo "papersync_changed=true"  >> $GITHUB_OUTPUT || echo "papersync_changed=false"  >> $GITHUB_OUTPUT

          # Changed plugins list
          if grep -qE "^plugins/" changed_files.txt; then
            echo "plugins_changed=true" >> $GITHUB_OUTPUT
            grep -E "^plugins/" changed_files.txt | cut -d'/' -f2 | sort -u > changed_plugins.txt
          else
            echo "plugins_changed=false" >> $GITHUB_OUTPUT && touch changed_plugins.txt
          fi

          # Changed themes list
          if grep -qE "^themes/" changed_files.txt; then
            echo "themes_changed=true" >> $GITHUB_OUTPUT
            grep -E "^themes/" changed_files.txt | cut -d'/' -f2 | sort -u > changed_themes.txt
          else
            echo "themes_changed=false" >> $GITHUB_OUTPUT && touch changed_themes.txt
          fi

      - name: 🐘 Boot PHP
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer:v2
          coverage: none

      - name: 📦 Boot Node.js
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.npm_deps_changed == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: ♻️ Cache Composer
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: ♻️ Cache Composer Deps
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.composer_deps_changed == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: ♻️ Cache NPM
        if: steps.changes.outputs.build_required == 'true' || steps.changes.outputs.npm_deps_changed == 'true'
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: node-modules-${{ runner.os }}-

      - name: 📥 Composer Install
        if: (steps.changes.outputs.composer_deps_changed == 'true') || (steps.changes.outputs.build_required == 'true' && steps.composer-cache.outputs.cache-hit != 'true')
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: 📥 NPM Install
        if: (steps.changes.outputs.npm_deps_changed == 'true') || (steps.changes.outputs.build_required == 'true' && steps.node-modules-cache.outputs.cache-hit != 'true')
        run: |
          if [ -f package-lock.json ]; then
            npm ci --prefer-offline --no-audit
          else
            npm install --prefer-offline --no-audit
          fi

      - name: ⚡ Install WP-CLI
        if: steps.changes.outputs.build_required == 'true'
        run: |
          curl -sSL https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp

      - name: 🛠️ Build Frontend Assets
        if: steps.changes.outputs.build_required == 'true'
        run: npm run build:linux

      - name: 🔧 Lint & Fix Assets
        if: steps.changes.outputs.build_required == 'true'
        run: npm run lint:fix

      - name: 🧹 Clean Up Build Artifacts
        if: steps.changes.outputs.build_required == 'true'
        run: |
          rm -rf ./plugins/wisesync/blocks/src ./themes/papersync/blocks/src

      - name: 📦 Prep $TARGET_BRANCH for Deployment
        run: |
          git config --global user.name  "Shubham Kumar Bansal"
          git config --global user.email "shub@shubkb.com"
          mkdir -p deploy && cd deploy
          git init
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch --depth=1 origin $TARGET_BRANCH
          git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH

      - name: 🚚 Sync Plugin Updates - Special & Changed
        run: |
          mkdir -p deploy/plugins
          if [ "${{ steps.changes.outputs.build_required }}" = "true" ]; then
            cp -r plugins/wisesync deploy/plugins/
          fi
          while IFS= read -r plugin; do
            cp -r plugins/$plugin deploy/plugins/ || true
          done < changed_plugins.txt

      - name: 🚚 Sync Theme Updates - Special & Changed
        run: |
          mkdir -p deploy/themes
          if [ "${{ steps.changes.outputs.build_required }}" = "true" ]; then
            cp -r themes/papersync deploy/themes/
          fi
          while IFS= read -r theme; do
            cp -r themes/$theme deploy/themes/ || true
          done < changed_themes.txt

      - name: 💌 Commit & Push to $TARGET_BRANCH
        run: |
          cd deploy
          git add --all
          git commit -m "Deploy build: $(date +'%Y-%m-%d %H:%M:%S') – ${{ steps.last_commit.outputs.message }} (SHA:${{ github.sha }})" || echo "Nothing to deploy"
          git push origin HEAD:$TARGET_BRANCH

      - name: 🔄 Checkout & Sync wisesync Repo
        if: env.IS_MASTER == 'true' && steps.changes.outputs.wisesync_changed == 'true'
        uses: actions/checkout@v3
        with:
          repository: shubkb07/wisesync
          path: wisesync_repo
          token: ${{ secrets.GH_PAT }}

      - name: 🔄 Update wisesync Repo
        if: env.IS_MASTER == 'true' && steps.changes.outputs.wisesync_changed == 'true'
        run: |
          find wisesync_repo -mindepth 1 -not -path "wisesync_repo/.git*" -delete
          cp -r plugins/wisesync/* wisesync_repo/
          cd wisesync_repo
          git config user.name  "Shubham Kumar Bansal"
          git config user.email "shub@shubkb.com"
          git add --all
          git commit -m "Update from main repo: $(date +'%Y-%m-%d %H:%M:%S') – ${{ steps.last_commit.outputs.message }}" || echo "No changes for wisesync"
          git push

      - name: 🔄 Checkout & Sync papersync Repo
        if: env.IS_MASTER == 'true' && steps.changes.outputs.papersync_changed == 'true'
        uses: actions/checkout@v3
        with:
          repository: shubkb07/papersync
          path: papersync_repo
          token: ${{ secrets.GH_PAT }}

      - name: 🔄 Update papersync Repo
        if: env.IS_MASTER == 'true' && steps.changes.outputs.papersync_changed == 'true'
        run: |
          find papersync_repo -mindepth 1 -not -path "papersync_repo/.git*" -delete
          cp -r themes/papersync/* papersync_repo/
          cd papersync_repo
          git config user.name  "Shubham Kumar Bansal"
          git config user.email "shub@shubkb.com"
          git add --all
          git commit -m "Update from main repo: $(date +'%Y-%m-%d %H:%M:%S') – ${{ steps.last_commit.outputs.message }}" || echo "No changes for papersync"
          git push

      - name: 🔄 Checkout & Sync wordpress-sync Repo
        if: env.IS_MASTER == 'true' && (steps.changes.outputs.wisesync_changed == 'true' || steps.changes.outputs.papersync_changed == 'true')
        uses: actions/checkout@v3
        with:
          repository: shubkb07/wordpress-sync
          path: wordpress_sync_repo
          token: ${{ secrets.GH_PAT }}

      - name: 🔄 Update wordpress-sync Repo
        if: env.IS_MASTER == 'true' && (steps.changes.outputs.wisesync_changed == 'true' || steps.changes.outputs.papersync_changed == 'true')
        run: |
          cd wordpress_sync_repo
          if [ "${{ steps.changes.outputs.wisesync_changed }}" = "true" ]; then
            mkdir -p plugins
            cp -r ../plugins/wisesync plugins/
          fi
          if [ "${{ steps.changes.outputs.papersync_changed }}" = "true" ]; then
            mkdir -p themes
            cp -r ../themes/papersync themes/
          fi
          rm -f CODE_OF_CONDUCT.md LICENSE.md README.md CONTRIBUTING.md SECURITY.md SUPPORT.md
          cp -f ../CODE_OF_CONDUCT.md ../LICENSE.md ../README.md ../CONTRIBUTING.md ../SECURITY.md ../SUPPORT.md ./
          git config user.name  "Shubham Kumar Bansal"
          git config user.email "shub@shubkb.com"
          git add --all
          git commit -m "Update from main repo: $(date +'%Y-%m-%d %H:%M:%S') – ${{ steps.last_commit.outputs.message }}" || echo "No changes for wordpress-sync"
          git push

  release:
    name: 📦 Parse & Create Releases
    runs-on: ubuntu-latest
    needs: build_and_deploy
    if: ${{ startsWith(needs.build_and_deploy.outputs.commit_message, 'Release:') }}

    steps:
      - name: 📥 Checkout Main Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: 🔍 Parse Release Information
        id: parse_release
        shell: bash
        run: |
          set -euo pipefail
          
          # Store the full commit message with original format
          git log -1 --pretty=%B > full_commit_message.txt
          
          # Extract version from first line
          version_line=$(head -n 1 full_commit_message.txt)
          if [[ $version_line =~ ^Release:\ ([v]?[0-9]+\.[0-9]+\.[0-9]+(-[[:alnum:]]+)?)$ ]]; then
            version="${BASH_REMATCH[1]}"
            [[ $version != v* ]] && version="v$version"
          else
            echo "::error ::Invalid release version format. Expected 'Release: v1.2.3'"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Remove the first line (version line)
          sed -i '1d' full_commit_message.txt
          
          # Now extract the quoted parts with a different approach
          # First, join all lines for processing
          joined_message=$(tr '\n' '\001' < full_commit_message.txt)
          
          # Extract each quoted section
          quoted_sections=()
          remaining="$joined_message"
          
          # Match quoted content even across line breaks (now represented by \001)
          while [[ "$remaining" =~ \"([^\"]*)\" ]]; do
            # Extract the match and replace \001 with newlines
            match="${BASH_REMATCH[1]}"
            match="${match//\001/$'\n'}"
            quoted_sections+=("$match")
            
            # Remove the matched part from the remaining text
            before="${remaining%%\"${BASH_REMATCH[1]}\"*}"
            after="${remaining#*\"${BASH_REMATCH[1]}\"}"
            remaining="${before}${after}"
          done
          
          # Count how many sections we found
          component_count=${#quoted_sections[@]}
          
          echo "Found $component_count quoted sections"
          
          # Verify we have at least 3 components
          if [[ $component_count -lt 3 ]]; then
            echo "::error ::Invalid release format: found $component_count quoted parts, expected at least 3"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Always take the first 2 as titles
          wisesync_title="${quoted_sections[0]}"
          papersync_title="${quoted_sections[1]}"
          
          # If we have exactly 3 components, use the 3rd as description for both
          if [[ $component_count -eq 3 ]]; then
            combined_desc="${quoted_sections[2]}"
            wisesync_desc="$combined_desc"
            papersync_desc="$combined_desc"
          else
            # We have 4+ components, use 3rd for wisesync and 4th for papersync
            wisesync_desc="${quoted_sections[2]}"
            papersync_desc="${quoted_sections[3]}"
          fi
          
          # Output the variables using heredocs to preserve formatting
          {
            echo "version=$version"
            echo "wisesync_title=$wisesync_title"
            echo "papersync_title=$papersync_title"
            echo "wisesync_desc<<EOF"
            echo "$wisesync_desc"
            echo "EOF"
            echo "papersync_desc<<EOF"
            echo "$papersync_desc"
            echo "EOF"
            echo "is_valid=true"
          } >> $GITHUB_OUTPUT
          
          # Debug output to help verify parsing
          echo "::group::Debug Release Information"
          echo "Version: $version"
          echo "WiseSync Title: $wisesync_title"
          echo "PaperSync Title: $papersync_title"
          echo "Component Count: $component_count"
          echo "WiseSync Description:"
          echo "$wisesync_desc"
          echo "PaperSync Description:"
          echo "$papersync_desc"
          echo "::endgroup::"

      - name: 🏷️ Create Release for Current Repo (sync-web)
        if: steps.parse_release.outputs.is_valid == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.parse_release.outputs.version }}
          name: ${{ steps.parse_release.outputs.wisesync_title }} & ${{ steps.parse_release.outputs.papersync_title }}
          body: |
            ${{ steps.parse_release.outputs.wisesync_desc }}

            ${{ steps.parse_release.outputs.papersync_desc }}
          prerelease: ${{ contains(steps.parse_release.outputs.version, 'alpha') || contains(steps.parse_release.outputs.version, 'beta') }}
      
      - name: 🏷️ Create Release for WordPress Sync
        if: steps.parse_release.outputs.is_valid == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_PAT }}
          repository: shubkb07/wordpress-sync
          tag_name: ${{ steps.parse_release.outputs.version }}
          name: ${{ steps.parse_release.outputs.wisesync_title }} & ${{ steps.parse_release.outputs.papersync_title }}
          body: |
            ${{ steps.parse_release.outputs.wisesync_desc }}

            ${{ steps.parse_release.outputs.papersync_desc }}
          prerelease: ${{ contains(steps.parse_release.outputs.version, 'alpha') || contains(steps.parse_release.outputs.version, 'beta') }}

      - name: 🏷️ Create Release for WiseSync
        if: steps.parse_release.outputs.is_valid == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_PAT }}
          repository: shubkb07/wisesync
          tag_name: ${{ steps.parse_release.outputs.version }}
          name: ${{ steps.parse_release.outputs.wisesync_title }}
          body: ${{ steps.parse_release.outputs.wisesync_desc }}
          prerelease: ${{ contains(steps.parse_release.outputs.version, 'alpha') || contains(steps.parse_release.outputs.version, 'beta') }}

      - name: 🏷️ Create Release for PaperSync
        if: steps.parse_release.outputs.is_valid == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_PAT }}
          repository: shubkb07/papersync
          tag_name: ${{ steps.parse_release.outputs.version }}
          name: ${{ steps.parse_release.outputs.papersync_title }}
          body: ${{ steps.parse_release.outputs.papersync_desc }}
          prerelease: ${{ contains(steps.parse_release.outputs.version, 'alpha') || contains(steps.parse_release.outputs.version, 'beta') }}
